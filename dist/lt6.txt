이번 시간부터 dfs와 bfs 알고리즘에 대해서 다뤄보겠습니다. dfs와 bfs는 대표적인 그래프 탐색 알고리즘인데요. 탐색이란 많은 양의 데이터가 있을 때 이 중에서 원하는 데이터를 찾는 과정을 의미합니다. 실제로 다양한 알고리즘에서 특정 조건에 맞는 데이터가 존재하는지 만약 존재한다면 어떤 위치에 존재하는지 등을 찾고자 하는 목적으로 다양한 탐색 알고리즘을 사용하곤 합니다. 대표적인 그래프 탐색 알고리즘으로는 디에프에스와 비에프에스가 있는데요. 이러한 디에프에스와 비에프에스는 코딩 테스트에서 매우 자주 등장하는 유형이므로 반드시 숙지할 필요가 있습니다. 특히 국내 대기업 공채에서는 이러한 dfs와 bfs를 적절히 활용해야 하는 문제가 자주 출제되고 있습니다. 본격적으로 dfs와 bfs에 대해서 알아보기 전에 반드시 알아두고 넘어가야 할 두 가지 자료 구조에 대해서 먼저 알아보겠습니다. 먼저 스택 자료 구조인데요. 스택 자료 구조부터 확인해 보겠습니다. 스택 자료 구조는 먼저 들어온 데이터가 나중에 나가는 형식으로 동작하는 자료 구조입니다. 그래서 선입 표출이라고도 부르는데요. 말 그대로 먼저 입력되는 데이터가 나중에 출력된다라는 의미로 이해하시면 되겠습니다. 그래서 우리가 흔히 스택 자료 구조를 설명할 때 입구와 출구가 동일한 형태로 스택을 시각화하곤 합니다 가장 대표적인 예시로는 박스 사키 예시를 들을 수 있는데요. 우리가 여러 개의 박스를 쌓아야 할 때 즉 스텝하고자 할 때는 아래쪽에서부터 박스를 차례대로 올려놓습니다. 그렇게 쌓아 올린 박스를 다시 내리고자 할 때는 마찬가지로 가장 위쪽에 있는 박스부터 차례대로 내리게 될 겁니다. 그렇기 때문에 스택 자료 구조에 대해서 기억하고자 할 때는 박스 쌓기 예시로 기억하시면 좋습니다. 이러한 스텝 자료 구조는 우리가 배우게 될 dfs 알고리즘뿐만 아니라 정말 다양한 알고리즘에서 사용되기 때문에 스텝 자료 구조의 동작 방법과 사용 방법에 대해서 꼭 알아둘 필요가 있습니다. 스택 자료 구조는 삽입과 삭제 두 연산으로 구성되는데요. 간단히 이렇게 여러 개의 데이터를 삽입하고 삭제하는 예시를 확인해 보겠습니다. 먼저 이렇게 오라는 원소를 삽입한다고 하면 출구와 입구가 동일한 마치 프링글스 과자통과 유사하게 생긴 통 형태로 스펙을 시각화할 수 있는데요. 이렇게 오라는 데이터가 오른쪽에서 들어와서 삽입된 걸 확인할 수 있습니다. 이제 이어서 일하는 데이터가 추가적으로 들어온다면 마찬가지로 이렇게 오른쪽에서 데이터가 들어오기 때문에 원소 5에 오른쪽에 데이터가 위치한 걸 확인할 수 있습니다. 이어서 마찬가지의 원리로 원소 3이 들어오고 7도 들어오고 이렇게 데이터가 총 4개로 구성된 걸 확인할 수 있고요 이제 여기에서 삭제 연산이 수행되면 가장 마지막에 들어왔던 데이터인 7이 우선적으로 나가게 됩니다. 그래서 이렇게 삭제가 되었을 때는 마지막에 있던 원소 7이 이렇게 오른쪽으로 나갔다고 이해하시면 되겠습니다. 이어서 원소 1이 또 삽입되고 다시 원소 4가 추가적으로 삽입되면 이러한 형태가 되겠고요 다시 마지막으로 원소 4가 삭제되면 이렇게 가장 마지막에 들어왔던 원소 4가 우선적으로 나가게 되는 걸 확인할 수 있습니다. 파일선에서 이러한 스펙 자료 구조를 이용하기 위해서는 단순히 리스트 자료용을 이용하시면 됩니다. 리스트 자료형은 가장 오른쪽에 원소를 삽입하는 어펜드 메서드와 가장 오른쪽에서 하나의 원소를 꺼내는 팝 메서드를 지원하기 때문에 이를 그대로 이용해서 스텝과 같이 사용할 수 있습니다. 또한 이 어팬드 함수와 팝 함수의 시간 복잡도는 상수 시간 즉 5의 1이기 때문에 스택 자료 구조를 활용하기에 적합합니다. 그래서 파이썬에서는 별도로 다른 표준 라이브러리를 이용할 필요 없이 기본적으로 제공되는 객체인 이 리스트를 이용해서 바로 스텝을 이용할 수 있습니다. 그래서 아까 다루어 본 예시와 정확히 동일하게 총 8개의 연산을 차례대로 수행해 본 걸 확인할 수 있고요 결과적으로 스택에 담겨 있는 원서를 출력해 보았을 때 스택의 최상단 원서부터 출력한다면 현재 스택이 리스트 형태로 구현되어 있기 때문에 리스트에 담긴 모든 원소를 거꾸로 뒤집어서 즉 순서를 뒤집어서 출력하도록 만들면 최상단 원서부터 출력됩니다. 즉 리스트에서 가장 왼쪽에 있는 원소가 가장 먼저 들어왔던 원소라고 볼 수 있기 때문에 최상단 원소부터 출력할 때는 먼저 나가고자 하는 원부터 출력을 해야 돼서 이렇게 원소의 순서를 뒤집은 것이라고 이해할 수 있습니다. 이어서 스텝의 최하단 원서부터 출력하고자 한다면 단순히 리스트를 그대로 출력하면 되겠죠. 그래서 실행 결과를 확인해 보시면 최하단 원서부터 출력했을 때는 차례대로 5 2 3 1로 우리가 앞서 그림에서 다루어 보았던 예시와 정확히 일치하는 걸 확인할 수 있습니다. 이어서 10 플러스로 스펙을 구현하는 방법에 대해서 확인해 보겠습니다. c 플러스는 stl 라이브러리에서 스택 자료 구조를 지원하는데요. 이렇게 스택 내에서 사용될 원소로 인트 자료형을 이용하겠다고 명시한 걸 확인할 수 있습니다. 실제로 스택의 원소를 넣고자 할 때는 푸시 함수 그리고 스펙에서 원소를 꺼내고자 할 때는 팝 함수를 사용하실 수 있습니다. 또한 이 탑 함수는 현재 최상단 원소가 무엇인지 알려주는 함수입니다. 즉 현재 꺼내고자 하는 원소가 무엇인지 확인하고자 할 때 탑 함수를 사용하실 수 있고요 그래서 스택에 포함된 모든 원소를 차례대로 꺼내서 출력하고자 할 때는 이와 같이 스택의 원소가 빌 때까지 반복적으로 최상단 원소가 무엇인지 출력하면서 이제 그 최상단 원소를 꺼내도록 만들면 되는 겁니다. 결과적으로 실행 결과를 확인해 보시면 1325 즉 최상단 원서부터 차례대로 꺼냈을 때의 결과가 나오는 걸 확인할 수 있습니다. 이어서 자바에서도 마찬가지로 스택 자료 구조를 지원하는데요. 마찬가지로 스택 내에서 사용될 자료용을 명시할 수 있습니다. 이렇게 정수형 데이터를 다루고자 할 때는 인테리어 클래스를 이용하시면 되고요 시뿔뿔과 마찬가지로 데이터를 삽입할 때는 푸시 메서드 데이터를 꺼낼 때는 팝 메서드를 사용할 수 있습니다. 다만 자바에서는 스택의 최상단 원서를 출력하고자 할 때 픽 메서드가 사용된다는 점이 특징입니다. 실행 결과 또한 시 플러스 플러스에서의 결과와 동일합니다. 이렇게 간단히 스택 자료 구조의 사용 방법과 동작 과정에 대해서 알아보았는데요. 스택 자료 구조는 프로그래밍 언어를 막론하고 다양한 알고리즘에서 굉장히 자주 사용되는 기초 자료 구조이므로 그 사용 방법에 대해서 정확히 알고 있는 것이 중요합니다. 이어서 q 자료 구조에 대해 알아보겠습니다. q 자료 구조는 먼저 들어온 데이터가 먼저 나가는 형식의 자료 구조입니다. 그래서 선입선출 자료 구조라고도 부르고요 q를 간단히 이해하기 위해서는 입구와 출구가 모두 뚫려 있는 터널과 같은 형태를 생각하시면 되는데요. 혹은 은행 창구 등에서 사람들이 번호표를 뽑고 대기하고 있는 모습을 생각해 보실 수 있습니다. 흔히 우리가 차례대로 어떠한 작업을 수행한다고 하면 대기열이라는 표현을 자주 사용하곤 하는데요. 실제로 영어권에서는 이 q라고 하는 것은 일반적으로 차례대로 먼저 들어온 데이터가 먼저 처리를 받는 일종의 대기열을 나타내고자 할 때 q라고 표현하곤 합니다. 그래서 이와 같이 데이터가 터널에 들어갔다가 차례대로 나가는 형태로서 큐를 생각하시면 이해에 도움이 될 거라고 생각합니다. 그래서 이와 같이 총 8개의 연산이 존재한다고 가정하겠습니다. 또한 현재 그림에서는 이렇게 데이터가 왼쪽으로 들어와서 오른쪽으로 나간다고 가정하겠습니다. 이제 이건 실제 구현상에서는 조금 다를 수 있지만 현재 그림에서는 이렇게 왼쪽에서 데이터가 들어와 오른쪽으로 나가는 것으로 표현하도록 하겠습니다. 먼저 데이터 5가 들어오면 이처럼 왼쪽에서 데이터가 들어온 것으로 이해할 수 있고요 이어서 데이터 2가 들어오게 되면 이제 가 마찬가지로 왼쪽으로 데이터가 들어와서 현재 큐에 담겨 있는 내용은 25인 걸 확인할 수 있습니다. 이어서 마찬가지로 3과 7이 차례대로 들어오면 다음과 같이 가장 먼저 들어왔던 데이터가 오른쪽에 위치하고 가장 나중에 들어왔던 데이터가 왼쪽에 위치하는 형태로 시각화할 수 있는 걸 확인할 수 있습니다. 이제 데이터가 삭제가 된다고 하면 가장 오른쪽에 위치하는 이 원소 5부터 차례대로 나가게 됩니다. 다시 이렇게 원소가 들어오게 되면 마찬가지로 항상 원소는 이렇게 왼쪽으로 들어온다고 이해할 수 있고요 마찬가지로 원소 4까지 들어오면 이런 형태가 됩니다. 다시 여기에서 삭제 연산을 수행하면 가장 먼저 들어왔던 데이터인 이가 이렇게 오른쪽으로 빠져나간다고 이해하시면 되겠습니다. 그래서 결과적으로 q에 남아 있는 원소를 확인해 보시면 4 1 7 3인 걸 확인할 수 있죠 이러한 q 자료 구조를 파일선에서 이용하고자 할 때는 다음과 같이 댓 라이브러리를 사용할 수 있습니다. 사실 엄밀히 말하면 단순히 리스트 자료용을 이용해서 큐를 구현할 수도 있는데요. 리스트 자료용을 이용하는 경우 기능적으로는 큐를 구현할 수 있지만 시간 복잡도가 더 높아서 비효율적으로 동작할 수 있기 때문에 큐를 이용하실 때는 꼭 댁 라이브러리를 사용할 수 있도록 해주세요. 그래서 다음과 같이 파이썬에서 q를 이용하고자 할 때는 하나의 댓 객체를 생성한 뒤에 원소를 삽입하고자 할 때는 어팬드 그리고 삭제하고자 할 때는 팝 레프트 함수를 이용하시면 됩니다. 엄밀히 말하면 덱 라이브러리는 스텝과 q 자료 구조의 장점을 모두 합친 형태의 자료 구조라고 볼 수 있는데요. 잭 라이브러리의 원소를 삽입할 때는 이 어팬드 함수는 리스트에서의 어팬드 함수와 동일하게 동작한다고 보시면 됩니다. 그래서 가장 마지막에 즉 가장 오른쪽 위치에 하나의 원소를 추가하는 거고요 시간 복잡도는 마찬가지로 상소 시간입니다. 그리고 여기 팝 레프트는 가장 왼쪽에 있는 데이터를 꺼내고자 할 때 사용할 수 있는 메서드이며 마찬가지로 시간 복잡도는 5회 1 즉 상수 시간입니다. 다만 일반적으로 파일선에서 큐를 구현하고자 할 때는 이렇게 덱을 이용하고 원소를 넣을 때는 어펜드 뺄 때는 팝 레프트를 사용하는 것이 관행처럼 사용이 되고 있기 때문에 저 또한 교재에서 동일한 형태를 이용했고요 다만 여기에서 그려지는 형태는 우리가 앞서 다루었던 그림과 반대 방향이라고 이해하시면 되겠습니다. 즉 실제 구현상으로 이렇게 데이터가 오른쪽으로 들어와서 데이터가 왼쪽으로 나간다고 이해할 수 있겠죠. 그래서 그림에서 확인했던 것과 동일한 연상을 수행한 뒤에 단순하게 q의 모든 원소를 주력하도록 만들면 3714로 아까 그림에서 다루었던 예시와는 반대 방향인 걸 확인할 수 있습니다. 그래서 q의 원소를 역순으로 바꾼 다음에 출력하고자 할 때는 이렇게 리버스 메서드를 사용해서 순서를 바꾼 뒤에 그 바뀌어진 순서를 출력하도록 만들 수 있습니다. 다시 한 번 말씀드리지만 우리가 큐를 구현할 때는 파이썬에서 기본적으로 제공하는 리스트 자료형이 아닌 덱을 이용하시는 게 더 시간적으로 우수합니다. 실제로 파이썬에서 단순히 리스트를 이용해서 특정 인덱스에 존재하는 원소를 꺼내기 위해 팝 메서드를 호출하게 되면 원소를 꺼낸 뒤에 원소의 위치를 조정하는 과정이 필요하기 때문에 원소를 내는 연산 자체가 ol 케이만큼의 시간 복잡도가 요구됩니다. 그렇기 때문에 리스트를 이용하시지 않고 덱을 이용해서 q를 구현해 주세요. 이어서 시 플러스 플러스에서 q를 구현하기 위해서는 stl 라이브러리에 포함되어 있는 q 자료 구조를 이용하시면 됩니다. 마찬가지로 정수용 데이터가 사용될 때는 q에 정수용 데이터가 들어간다고 명시해 주시면 되고요 q에 데이터를 넣을 때는 푸시 메서드를 이용하고 q에서 원소를 꺼낼 때는 팝 메서드를 이용하시면 됩니다. 이제 여기에서 가장 먼저 들어온 데이터를 반환하고자 할 때는 프론트 메서드를 호출하실 수 있는데요. 이 프론트 메서드는 현재 q 자료 구조에 포함되어 있는 원소 중에서 가장 먼저 들어온 데이터 즉 현재 꺼내고자 하는 데이터를 의미합니다. 그래서 q에서 원소를 하나씩 꺼내서 모든 원소를 출력하고자 한다면 큐가 빌 때까지 이 앞쪽에 있는 원소를 출력한 다음에 실제로 원소를 꺼내도록 만들면 됩니다. 자바 또한 마찬가지로 q 자료 구조를 지원하는데요. 마찬가지로 q에 정수형 데이터가 들어갈 때는 이 인테저 클래스를 넣어줄 수 있도록 하고요 실제로 우리가 자료 구조를 이용하고자 할 때는 이와 같이 링크드 리스트 내에 구현되어 있는 큐를 사용하는 것이 일반적이고요 즉 q 중에서도 연결 리스트 방식으로 구현된 형태를 이용하시는 게 가장 기본적인 형태입니다. 그래서 q의 원소를 삽입하고자 할 때는 오퍼 메서드를 호출하고요 q에서 원소를 꺼내고자 할 때는 폴 메서드를 호출합니다. 흔히 우리가 운영 체제를 공부할 때 폴링과 같은 그런 단어를 많이 접하곤 하는데요. 거기에서 의미하는 폴링과 동일한 의미입니다. 즉 대기업에 쌓여 있는 원서 중에서 하나를 꺼내서 확인하겠다라는 의미를 가지고 있다고 보시면 되겠습니다. 또한 여기에서 이 폴 메서드는 단순히 원소를 꺼낼 뿐만 아니라 그렇게 꺼내진 원소를 바로 반환해 준다는 특징이 있어서 이와 같이 먼저 들어온 원소 부추출하고자 할 때는 그냥 바로 폴 메서드를 호출하면서 그 호출된 결과를 출력하도록 만들면 슈에 담긴 모든 데이터가 차례대로 출력되는 것과 같습니다. 이상으로 스텝과 q 자료 구조에 대해서 알아보고 이를 프로그램 코드상으로 어떻게 이용할 수 있는지까지 알아보았습니다.